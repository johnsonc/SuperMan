#+TITLE:     ProjectManagerPlans.org
#+AUTHOR:    Klaus Kähler Holst Thomas Alexander Gerds
#+EMAIL:     kkho@sund.ku.dk, tagteam@sund.ku.dk
#+DATE:      2012-02-12 Sun
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:

* Structure
#+begin_dot out.png -Tpng
digraph test {
{email phone meetings workflow} -> project;
project -> {analysis publish workflow data};
data -> analysis;
analysis -> {publish};
};
#+end_dot

** Projectmanager: one file includes a list of all projects

*** Make name of this file a user-option
    
The file org-project-manager keeps a tree-list with project-names.

#+BEGIN_SRC emacs-lisp
(defvar org-project-manager (concat org-directory "/" ProjectManager.org)
 "Name of the org-file which contains the projects")
#+END_SRC

*** Set the level of the projects

#+BEGIN_EXAMPLE
#+OPTION : org-project-manager-project-level = 2
#+END_EXAMPLE


#+BEGIN_SRC emacs-lisp
(defvar org-project-manager-project-level 2 "headline level where titles are project names ")
#+END_SRC

*** Functions

#+BEGIN_SRC emacs-lisp
    (defun org-project-manager-toggle-project-status ()
      "Function to toggle the status of the project, e.g. from \"active\" to \"waiting\" to \"done\""
      (interactive)
      ...
      )
#+END_SRC

*** Sample file
    
#+BEGIN_EXAMPLE
 * Research
  ** xxx
    :PROPERTIES:
    :PATH:     ~/research/projects/
    :PUB:      ~/public_html/research/projects/
    :END:
  ** yyy
    :PROPERTIES:
    :RPACKAGE:     yes
    :SUBDIRS:      R, data, doc, man
    :BUILDEXCLUDE  bootstrap, ...
    :END:
  ** zzz

 * Admin
  ** ååå
  ** øøø
 
 * Privat
  ** æææ
  ** aaa
#+END_EXAMPLE     

** Project files

Each file contains information about the project, workflow, files, links, etc.
   
*** Magic commands
#+BEGIN_SRC emacs-lisp
  (defun org-project-manager-archive-file ()
    "Function to toggle the status of a file, e.g. from \"current\" to \"old\" to \"do-not-touch-this-was-used-to-generate-results-for-a-publication\""
    (interactive)
    )
#+END_SRC

*** Sample file

#+BEGIN_EXAMPLE

** Collaborators
 - ab@gmail.com, ...

** Files 
*** active
*** old
** Meetings (minutes)    
** Documents
** Presentations
** Publications
** window config
** Emails 
** Phone calls


#+END_EXAMPLE

* Emacs lisp code
#+BEGIN_SRC emacs-lisp
  (defun org-project-manager-agenda ()
   (interactive)
    (let ((org-agenda-files (buffer-file-name)))
      (org-agenda)))
#+END_SRC

#+RESULTS:
: org-project-manager-agenda

* TodoList/WishList*
** DONE Write template function: 'new-project'
  CLOSED: [2012-10-07 Sun 09:44]
** TODO Customize tags, properties, capture and agenda view
** TODO Publish system
** TODO Adding projects (partially broken)
** TODO Smart archiving of data and code
** Semimatic transclusion of emails (gnus) and attachments
** DONE Window configurations for each project
   CLOSED: [2012-10-07 Sun 09:44]
** Optional: backup some or all projects (git)
** Setting a publishing directory (with automatic push to public_html server) 
** connect collaborators to bbdb and gnus-search
** TODO superman sorting. categories/key(todo)/date
** DONE in documents-view do not repeat header (header gitstauts lastcommit ...) for each category
** TODO jump to next category in superman/view-mode! (e.g. by TAB/S-TAB key)
** TODO sorting/rearranging documents from document-view?
** TODO FIX: When categories present: also show files without category!
** TODO Hide/unhide category in document-view/superman mode
** TODO probably need a method to show a view-buffer for all git-controlled files!
  git ls-tree -r master | cut -f2
  git ls-tree -r HEAD --name-only
** TODO adding file. Check for duplicates
** TODO git stuff (revert, vc-revision)
  - revert (i.e., git checkout -- file)
  - vc-revision
** TODO color/faces
  http://lists.gnu.org/archive/html/emacs-orgmode/2009-12/msg00320.html
  http://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Properties.html
  http://emacs-fu.blogspot.dk/2008/12/highlighting-todo-fixme-and-friends.html
  http://www.gnu.org/software/emacs/emacs-lisp-intro/html_node/Point-and-mark.html
** DONE shell-access from document-list
** TODO Create documents section for all git-controlled files.
** DONE choice on how to represent project in org-pro-switch-to-project,
  e.g.: projectname/category/collaborators instead of category/collaborators/projectname
** TODO directory hierachy in documents section (indentation in 'category' view?)
** TODO Decision: do we want to have seperate config files or only in Projects.org as a property for each project?
